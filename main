import java.util.Scanner;
import java.util.*;

public class Main{
   public static void main(String[] args){
    
      Scanner a = new Scanner(System.in);
      
      System.out.println("How many homeworks would you like to compare?");
      
      int n = a.nextInt();
      
      HashMap<String, String> map = new HashMap<String, String>();
      
      Map<Integer, String> namemap = new HashMap();
      
      for(int i = 0; i < n; i++){
         System.out.println("Enter student name.");
         String name = a.nextLine();
         System.out.println("Enter student code.");
         String code = a.nextLine();
         map.put(name, code); 
         namemap.put(i, name);
      }
      
      for(int i = 0; i < nCr(n,2); i++){
         if(similarity(map.get(namemap.get(i)), map.get(namemap.get(i+1))) > 0.8){
         System.out.println("Student " + namemap.get(i) + " and Student " + namemap.get(i+1) + " have " + similarity(map.get(namemap.get(i)), map.get(namemap.get(i+1))) + " similarity.");
      }
         else{
            System.out.println("They are not similar");
    
   }
      }
      a.close();
   }

public static int nCr(int n, int r) 
{ 
    return fact(n) / (fact(r) * 
                  fact(n - r)); 
} 

public static double similarity(String s1, String s2) {
       
    
    String longer = s1, shorter = s2;
    if (s1.length() < s2.length()) { 
      longer = s2; shorter = s1;
    }
    int longerLength = longer.length();
    if (longerLength == 0) { return 1.0;}
    return (longerLength - editDistance(longer, shorter)) / (double) longerLength;
  }
      
      
      
    
  public static int editDistance(String s1, String s2) { 
    //by subtracting the dissimilarity we can find similarity between two strings
    
    //to calculate dissimilarity in java we can use the levenshtein edit distance
    
    s1 = s1.toLowerCase();
    s2 = s2.toLowerCase();

    int[] costs = new int[s2.length() + 1];
    for (int i = 0; i <= s1.length(); i++) {
      int lastValue = i;
      for (int j = 0; j <= s2.length(); j++) {
        if (i == 0)
          costs[j] = j;
        else {
          if (j > 0) {
            int newValue = costs[j - 1];
            if (s1.charAt(i - 1) != s2.charAt(j - 1))
              newValue = Math.min(Math.min(newValue, lastValue),
                  costs[j]) + 1;
            costs[j - 1] = lastValue;
            lastValue = newValue;
          }
        }
      }
      if (i > 0)
        costs[s2.length()] = lastValue;
    }
    return costs[s2.length()];
  }
  
  
  
  
  
  
  
  
  
  
public static int fact(int n) 
{ 
    int res = 1; 
    for (int i = 2; i <= n; i++) 
        res = res * i; 
    return res; 
} 
   
}
